ABSTRACTION:

Abstract class cannot instance alone. They are define for common behavior of attributes that are shared with all subclasses and allow every class to realize its own unique behavior!

Abstraction allow us to write flexible and easy to maintain code! Also allow us to define behavior and attributes in one place instead to dublicate code in multiple classes, that why we call this kind of code 'more easy'.

Abstraction allow us to change the execution and behavior and of class or classes without affecting the behavior of rest of our code, only if this change cover the requirements of the abstract class or interface!

We cant make instances in abstract class. This class should be inherited. Abstract base classes (ABCs) enforce derived classes to implement particular methods from the base class.

When abstract method is created, no logic is defined. Only name of the method is defined. Every inherit class should implement this method and define own logic for it!

If one class in abstract class Example(ABC): , this class MUST have at least one abstract method. First option is def __init__(), and if there are more methods, it shouldn't be the __init__ method , except if the __init__ method is targeted as abstract maethod.

Class can be abstract if it is ABC and have at least one abstract method!

POLIMORPHISM:

Alow us to treat objects (instances) form different classes in same manner, if they share same function names and arguments!
Polimotphism is based on inheritence of classes and same names of methods

We have class with common function with no action. in other inherited classes we create function with same name, but different action and we can use this functions out of any class like common interface! The action can be defined in the base class and used ones for all inherited classes!

@DUCK TYPING: Duck typing is based on behavior of the object!

This give us flexibility of coding.


Overloading and build in methods: chack classes and objects unit in OOPFeb2023

Magic(dunder) common methods:
 
1.  class MyList:
    def __init__(self, items):
        self.items = items

    def __len__(self):							__len__
        return len(self.items)	


my_list = MyList([1, 2, 3, 4, 5])
print(len(my_list))

2.  class Point:					
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):						__add__
        return Point(self.x + other.x, self.y + other.y)

    def __str__(self):
        return f"({self.x}, {self.y})"


p1 = Point(1, 2)
p2 = Point(3, 4)
p3 = p1 + p2
print(p1)
print(p2)
print(p3)


3.  class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __sub__(self, other):						__sub__
        return Point(self.x - other.x, self.y - other.y)

    def __str__(self):
        return f"({self.x}, {self.y})"


p1 = Point(5, 8)
p2 = Point(3, 4)
p3 = p1 - p2
print(p1)
print(p2)
print(p3)


3. class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __mul__(self, other):						# __mul__
        return Point(self.x * other.x, self.y * other.y)

    def __str__(self):
        return f"({self.x}, {self.y})"


p1 = Point(5, 8)
p2 = Point(3, 4)
p3 = p1 * p2
print(p1)
print(p2)
print(p3)


4.  class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __floordiv__(self, other):                          #  __floordiv__ floor division 
        return Point(self.x // other.x, self.y // other.y)

    def __str__(self):
        return f"({self.x}, {self.y})"


p1 = Point(10, 14)
p2 = Point(3, 4)
p3 = p1 // p2
print(p1)
print(p2)
print(p3)

5. __truediv__(self, other) --> perator '/'
6. __pow__(self, other[, modulo]) --> operatr '**'
7. __lt__(self, other) --> operator '<' 
8. __le__(self, other) --> operator '<='
9. __eq__(self, other) --> operator '=='
10. __ne__(self, other) --> operator  '!='
11. __gt__(self, other) --> operator '>'
12. __ge__(self, other) --> operator  '>='



DUCK TYPING:

Duck typing is based on behavior of the object!

? Duck Typing is a type system used in dynamic
languages
? "If it looks like a duck and quacks like a duck, it's a
duck"
? i.e., we don't care about objects' types, but whether
they have the methods we need


EXAMPLE1:
-------------------------------------------------------------------
def print_area(obj):            # common function inherite objects
    print(obj.get_area())       # use function form other classes


class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def get_area(self):         # class method
        return self.width * self.height


class Circle:
    def __init__(self, radius):
        self.radius = radius

    def get_area(self):             # class method
        return 3.14 * self.radius * self.radius


rectangle = Rectangle(10, 5)        # define class object
circle = Circle(7)                  # define class object

print(rectangle.get_area())  # use function in class to calculate area for class object 
print(circle.get_area())     # use function in class to calculate area for class object 

print_area(rectangle)       # use common function to calculate area for objects from different classes
print_area(circle)          # see common function to calculate area for objects from different classes

-------------------------------------------------------------------------------

EXAMPLE2:
-------------------------------------------------------------------------------
class Cat:
	def sound(self):
		print("Meow!")

class Train:
	def sound(self):
		print("Sound from wheels slipping!")

for any_type in Cat(), Train():
any_type.sound()
-------------------------------------------------------------------------------

ABSTRACTION:

Abstract class cannot instance alone. They are define for common behavior of attributes that are shared with all subclasses and allow every class to realize its own unique behavior!

Abstraction allow us to write flexible and easy to maintain code! Also allow us to define behavior and attributes in one place instead to dublicate code in multiple classes, that why we call this kind of code 'more easy'.

Abstraction allow us to change the execution and behavior and of class or classes without affecting the behavior of rest of our code, only if this change cover the requirements of the abstract class or interface!

We cant make instances in abstract class. This class should be inherited. Abstract base classes (ABCs) enforce derived classes to implement particular methods from the base class.

When abstract method is created, no logic is defined. Only name of the method is defined. Every inherit class should implement this method and define own logic for it!

----------------------------------------------------------------
from abc import ABC, abstractmethod


class Animal(ABC):			@ abstract class

	def __init__(self, name):
		self.name = name

	@abstractmethod			# abstract method
	def sound(self):
		raise NotImplementedError("Subclass must implement")
	# Continues on next slide
----------------------------------------------------------------
from abc import ABC, abstractmethod


class Shape(ABC):			# enforce derived classes to implement particular methods from tthis class

    @abstractmethod		# abstract method 1
    def area(self):
        pass

    @abstractmethod		# abstract method 2
    def perimeter(self):
        pass


class Rectangle(Shape):

    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):				# abstract method 1
        return self.width * self.height

    def perimeter(self):			# abstract method 2
        return 2 * (self.width + self.height)


class Circle(Shape):

    def __init__(self, radius):
        self.radius = radius

    def area(self):				# abstract method 1
        return 3.14 * self.radius * self.radius

    def perimeter(self):			# abstract method 2
        return 2 * 3.14 * self.radius


my_rectangle = Rectangle(5, 3)
circle = Circle(4)

print(my_rectangle.area())
print(circle.area())
print(my_rectangle.perimeter())
print(circle.perimeter())
-----------------------------------------------------------------------------------------

EXAMPLE3:
-----------------------------------------------------------------------------------------

from abc import abstractmethod, ABC     # import abstraction


class Person(ABC):          # create abstract class

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def have_birthday(self):
        self.age += 1

    @abstractmethod         # force inherited classes to implement this method
    def work(self):
        ...


class Employee(Person):

    def work(self):             # Duck typing
        print("Working...")


class Boss(Person):

    def work(self):             # Duck typing
        print("Taking risks")


instances = [Boss("Ivan", 20), Employee("John", 19)]    # create instances

for instance in instances:      # iterate true instances
    instance.work()             # use common method work()
-------------------------------------------------------------------------------