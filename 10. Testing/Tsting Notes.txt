Testing types:

	- Unit testing:					# main testing
		test small components of the code: if statement, one function etc.

	- Integration testing				# main testing
		test how the different component in the software work together, example: add data in DB (flow)

	- end-to-end					# main testing
		full automated tests written in javascript, c# or other language that test all functions in site or app

	- system testing:
		test the full integration of the software

	- acceptance testing
		test if the reqirement of the stakeholders are covored

	- regression testing
		test after adding functionality, test for bugs

	- performance testing
		test of performance in different loads

	- security testing
		- identifying of vulnerabilities, potential threats, report creating

	- usebility testing
		test how easy is to use the product

--------------------------
THe 7 testing principles:
--------------------------

1. Context dependant

▪ Testing is context dependent
	▪ Testing is done differently in different contexts
▪ Example:
	▪ Safety-critical software is tested differently from an e-commerce site


2. Test all possibilities is not possible

▪ Exhaustive testing is impossible
	▪ All combinations of inputs and preconditions are usually an almost infinite number
▪ Testing everything is not feasible
	▪ Except for trivial cases
▪ Risk analysis and priorities should be used to focus on testing efforts


3. Early testing is alwais prefered

▪ Early testing is always preferred
▪ Testing activities shall be started as early as possible
▪ And shall be focused on defined objectives
▪ The later a bug is found – the more it costs!


4. Grouping of defects

▪ Defect clustering
	▪ Testing effort shall be focused proportionally
		▪ To the expected and later observed defect density of modules
▪ A small number of modules usually contains most of the defects discovered
	▪ Responsible for most of the operational failures


5. Pesticide paradox

	▪ Same tests repeated over and over again tend to lose their effectiveness
	▪ Previously undetected defects remain undiscovered
	▪ New and modified test cases should be developed


6. Testing shows the presence of defects

	▪ Testing can show that defects are present
	▪ Cannot prove that there are no defects
	▪ Appropriate testing reduces the probability for defects


7. Absence-of-errors fallacy: if no errors are found during tests it doesent mean it will work as planned

	▪ Finding and fixing defects itself does not help in these cases:
		▪ The system built is unusable
		▪ Does not fulfill the user needs and expectations


---------------
Manual testing
---------------
Cons:				main con is human error !!! how experienced is the test person!
	* not repeatable
	* hard to structure
	* less accuracy			main con !
	* require more time and redources

-------------------
Automation testing
-------------------
Automated testing represents business requirements in code

Types:
	
	- Unit tests - check small partitions of code
	- Integration tests - check how differetn partiotions work togeter
	- Functional/UI/E2E tests - check the product from user prospective user interface and functionality
	- System tests - check all systems and they components
	- Regression tests - after implementing new functions check for bugs


Pros:
▪ Done through an automation tool
▪ Higher accuracy
▪ Better reporting capabilities
▪ Increased coverage
▪ Improved bug detection
▪ Increased reusability
▪ Stability

▪ Automated tests:
	▪ are automatically repeatable
	▪ fail as early as possible
	▪ enable the presentation of business requirements in code
	▪ reduce the cost of change
	▪ decrease the number of defects in the code
▪ Bonus:
	▪ Improve design


conventions (good practices):

▪ While writing tests, different conventions and practices are used
	▪ Less abstract, more concrete
	▪ Test specific cases
▪ Triple A pattern:
	▪ Arrange		
		- initialize of variable like "result = ...'
		- create objects or setting parameters in test system
		
	▪ Act
		- execute the operations that should be tested

	▪ Assert
		- check of the end result of the test with expected result
			self.assertEqual(multiply(3, 3), 9) -> if 3x3 is equal to 9

UNIT TEST:

▪ Unit Testing is a type of software testing where individual units or components of a software are tested
▪ The purpose is to validate that each unit of the software code performs as expected ▪ Unit Testing is done during the development (coding phase) of an application by the developers

▪ Unit Testing is done during the development (coding phase) of an application by the developers

UNIT TESTING FRAMEWORK: PYTHON TEST FRAMEWORK IS PYTEST

▪ Individual units or components are being tested
▪ Validate each unit to perform as expected
▪ A unit may be an individual:
	▪ Function
	▪ Method
	▪ Procedure
	▪ Modules
	▪ Object

Example:
--------------------------------------------------------------------------------
import unittest     # import testing


class MyTest(unittest.TestCase):        # test class inherit unittest.TestCase

    def test_addition(self):
        result = 2 + 2
        self.assertEqual(result, 4)

    def test_subtraction(self):
        result = 5 - 3
        self.assertEqual(result, 2)

    def test_multiplication(self):
        result = 2 * 3
        self.assertEqual(result, 6)

    def test_division(self):
        result = 6 / 3
        self.assertEqual(result, 2)


if __name__ == '__main__':      # called to run all tests in the class
    unittest.main()		  # test module in python
----------------------------------------------------------------------------

Concepts Behind unittest:

▪ Test fixture:
	A baseline for running tests to ensure there is a fixed environment in which tests are run so that results are repeatable

▪ Test case:
	A set of conditions used to determine if a system works correctly

▪ Test suite:
	A collection of testcases used to test software if it has some specified set of behaviors


▪ The possible outcomes are

	▪ OK – all tests passed
	▪ FAIL – one or many tests failed, and an AssertionError exception is raised
	▪ ERROR – the tests raised an exception other than AssertionError


▪ unittest.TestCase – create test cases by subclassing it
▪ assertEqual() / assertNotEqual() – tests that the
two arguments are equal/unequal in value
▪ assertTrue() / assertFalse() – tests that the
argument has a Boolean value of True/False
▪ assertIn() / assertNotIn() – tests that the first
argument is in / is not in the second
▪ assertRaises() – raises a specific exception
▪ unittest.main() – provides a command-line interface
to the test script
▪ setUp() – prepares the test fixture
	▪ The method is called immediately before the test method


Unittest Modules:

▪ Advantages to placing the test code in a separate module:
	▪ The test module can be run standalone from the command line
	▪ The test code can more easily be separated from the shipped code
	▪ Tested code can be refactored more easily
	▪ If the testing strategy changes, there is no need to change the source code


Good test practices:

1. Add assertion messages:

	def test_get_info(self):
		result = self.person.get_info()
		expected_result = "Luc Peterson is 25 years old"	# add assertion message is a good practice
		self.assertEqual(result, expected_result)

2. Clear and readable names of the test functions
	▪ Should use business domain terminology
	▪ Should be descriptive and readable

Not good:
--------------------------------------------
	test_increment_Number(self): …
	test_Test1(self): …
	testTransfer(self): …
--------------------------------------------
Good:
--------------------------------------------
test_deposit_Xleva_should_increase_balance_with_Xleva(self): …
test_deposit_negativeLeva__should_not_increase_balance(self): …
--------------------------------------------


Mocking:

	▪ In plain English, mocking means "making a replica or imitation of something"
	▪ Mocking is the way to test benefiting from isolation
		▪ isolate related logic into SRP modules
		▪ simulate the behavior of these modules


Example: create replica of the tested function without inherited dependancies
-----------------------------------------------------------------------------------------------

import unittest


import requests


def get_weather(city):
    url = f'http://api.weather.com/current?city={city}'
    response = requests.get(url)
    data = response.json()
    temperature = data['temperature']
    return temperature


# mocking test
from unittest.mock import patch         # patch replace function requests.get(url)


def test_get_weather():
    mock_response = {
        'temperature': 25.0
    }

    with patch('requests.get') as mock_get:                     # patch replace function requests.get(url)
        mock_get.return_value.json.return_value = mock_response

        temperature = get_weather('mock_city')

        assert_temperature = 25.0


if __name__ == '__main__':
    unittest.main()
--------------------------------------------------------------------------------------------


Exercise:

Test coverage: install coverage.py to check coverage in pycharm for info, not mandatory


Aproach testing like:	# first decide what is going to be tested and create names of the methods. second go true every one of them and test results.
Example: 
D:\Python Projects\SoftUniOOPFeb2023\10. Testing\CarManager

Examle: with calss attributes: 
D:\Python Projects\SoftUniOOPFeb2023\10. Testing\Exrcise\Exercise-Resources\hero
D:\Python Projects\SoftUniOOPFeb2023\10. Testing\Exrcise\Exercise-Resources\vehicle

Ecample: with list:
D:\Python Projects\SoftUniOOPFeb2023\10. Testing\List

Example: with Dictionary:
D:\Python Projects\SoftUniOOPFeb2023\10. Testing\Exrcise\Exercise-Resources

General example:

import unittest


class TestMyCLass(unittest.TestCase):

    def setUp(self):					# set all class instances that we will test with
        self.object1 = MyCLass(arg1, arg2)		# create instance of every class needed for testing
        self.object2 = MyOtherCLass(arg1, arg2)	# create instance of every class needed for testing

    # test initilization of objects	is the first test
    def test_init_correct_creation_instances(self):
	  self.assertEqual(arg1, self.object_1.arg1)
	  self.assertEqual(arg2, self.object_1.arg2)
	  ...

	  seld.object_2 = OtherClass(arg1, self.object_2.arg1)
 	  seld.object_2 = OtherClass(arg2, self.object_2.arg2)
	  ...

    def test_function_1_as_many_details_as_possible_in_test_function_name(self):
	  # set object parameter to some value if needed, before action # Arrange
	  self.object_1.parameter_1 = 0			# Arrange
	  result = self.object_1.function_x			# Act
	  self.assertEqual(expected_result, result)	# Assert

    # HOW TO TEST EXCEPTIONS:
    def test_function_name_with_as_many_details_as_possible_and_exception_details(self):
	  self.object_1.arg1 = 0 				# Arrange
        with self.assertRaises(Exception) as ex:	# set exception
            self.hero.battle(self.enemy)			# Act
        self.assertEqual("result error text", str(ex.exception)) # Assert


if __name__ == '__main__':
    unittest.main()

	  

